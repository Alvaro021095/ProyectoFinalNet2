//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Platform.Entity.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectoNet2Entities1 : DbContext
    {
        public ProyectoNet2Entities1()
            : base("name=ProyectoNet2Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actividad> Actividad { get; set; }
        public virtual DbSet<Cargo> Cargo { get; set; }
        public virtual DbSet<Integrante> Integrante { get; set; }
        public virtual DbSet<Proyecto> Proyecto { get; set; }
        public virtual DbSet<Recurso> Recurso { get; set; }
        public virtual DbSet<Recurso_Tarea> Recurso_Tarea { get; set; }
        public virtual DbSet<Reunion> Reunion { get; set; }
        public virtual DbSet<Tarea> Tarea { get; set; }
        public virtual DbSet<Tipo_Usuario> Tipo_Usuario { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int crearProyecto(string nombre, Nullable<System.DateTime> fecha_ini, Nullable<System.DateTime> fecha_fin, string etapa, Nullable<int> cargoId)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var fecha_iniParameter = fecha_ini.HasValue ?
                new ObjectParameter("fecha_ini", fecha_ini) :
                new ObjectParameter("fecha_ini", typeof(System.DateTime));
    
            var fecha_finParameter = fecha_fin.HasValue ?
                new ObjectParameter("fecha_fin", fecha_fin) :
                new ObjectParameter("fecha_fin", typeof(System.DateTime));
    
            var etapaParameter = etapa != null ?
                new ObjectParameter("etapa", etapa) :
                new ObjectParameter("etapa", typeof(string));
    
            var cargoIdParameter = cargoId.HasValue ?
                new ObjectParameter("cargoId", cargoId) :
                new ObjectParameter("cargoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crearProyecto", nombreParameter, fecha_iniParameter, fecha_finParameter, etapaParameter, cargoIdParameter);
        }
    
        public virtual int editarProyecto(Nullable<int> id, string nombre, Nullable<System.DateTime> fecha_ini, Nullable<System.DateTime> fecha_fin, string etapa, Nullable<int> cargoId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var fecha_iniParameter = fecha_ini.HasValue ?
                new ObjectParameter("fecha_ini", fecha_ini) :
                new ObjectParameter("fecha_ini", typeof(System.DateTime));
    
            var fecha_finParameter = fecha_fin.HasValue ?
                new ObjectParameter("fecha_fin", fecha_fin) :
                new ObjectParameter("fecha_fin", typeof(System.DateTime));
    
            var etapaParameter = etapa != null ?
                new ObjectParameter("etapa", etapa) :
                new ObjectParameter("etapa", typeof(string));
    
            var cargoIdParameter = cargoId.HasValue ?
                new ObjectParameter("cargoId", cargoId) :
                new ObjectParameter("cargoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarProyecto", idParameter, nombreParameter, fecha_iniParameter, fecha_finParameter, etapaParameter, cargoIdParameter);
        }
    
        public virtual int eliminarProyecto(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarProyecto", idParameter);
        }
    
        public virtual ObjectResult<loginDirector_Result> loginDirector(string usuario, string contra, string tipoUsuario)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraParameter = contra != null ?
                new ObjectParameter("contra", contra) :
                new ObjectParameter("contra", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("tipoUsuario", tipoUsuario) :
                new ObjectParameter("tipoUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<loginDirector_Result>("loginDirector", usuarioParameter, contraParameter, tipoUsuarioParameter);
        }
    
        public virtual int registrarUsuDirector(string cedula, string nombre, string apellido, Nullable<int> edad, string telefono, string usuario, string contra, Nullable<int> tipoUsuario, string correo)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraParameter = contra != null ?
                new ObjectParameter("contra", contra) :
                new ObjectParameter("contra", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario.HasValue ?
                new ObjectParameter("tipoUsuario", tipoUsuario) :
                new ObjectParameter("tipoUsuario", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarUsuDirector", cedulaParameter, nombreParameter, apellidoParameter, edadParameter, telefonoParameter, usuarioParameter, contraParameter, tipoUsuarioParameter, correoParameter);
        }
    }
}
